I"]'<p>In this project, we will show you how to set up a PostgreSQL Database on a Raspberry Pi.</p>

<p><a href="https://www.postgresql.org">PostgreSQL</a> is a free and open-source relational database system that implements the SQL language.</p>

<p>If you are familiar with MySQL or MariaDB, you will be comfortable using PostgreSQL on your Raspberry Pi.</p>

<p>The reason for this is that all of these servers make use of SQL to manage their databases.</p>

<p>There are a few reasons why you may choose to use PostgreSQL over MySQL. One of those being PostgreSQL’s feature set and its compliance with implementing the SQL language.</p>

<p>The following sections will show you how to install PostgreSQL to your Raspberry Pi and create your very first database and table.</p>

<h2 id="setting-up-postgresql-to-the-raspberry-pi">Setting up PostgreSQL to the Raspberry Pi</h2>
<p>Installing PostgreSQL is a simple process thanks to it being available through the Raspberry Pi OS package repository.</p>

<p>The following steps will get you to install Postgres and configure the software so you can interact with the database using the pi user.</p>
<h2 id="installing-the-postgresql-server">Installing the PostgreSQL Server</h2>
<p>Our first step is to install the PostgreSQL server software to your Raspberry Pi.</p>

<p>This installation process is fairly straightforward and only takes two steps.</p>

<h3 id="we-need-to-start-by-updating-our-raspberry-pis-operating-system">We need to start by updating our Raspberry Pi’s operating system.</h3>

<p>Updating ensures we have a fresh base to install the PostgreSQL software to.</p>

<p>Run the following two commands on your Pi to update the package list and the installed packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
sudo apt full-upgrade
</code></pre></div></div>
<h3 id="our-next-step-is-to-install-the-postgresql-package-to-our-raspberry-pi-by-using-the-command-below">Our next step is to install the PostgreSQL package to our Raspberry Pi by using the command below.</h3>

<p>Alongside the Postgres server, this command will also install additional bits of software such as the command-line interface.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install postgresql
</code></pre></div></div>
<h2 id="configuring-postgresqls-cli-to-use-the-pi-user">Configuring PostgreSQL’s CLI to Use the pi User</h2>

<p>At the moment, if you try to use the PostgreSQL CLI using your Pi user, you will get an error saying you don’t have a role setup for it.</p>

<p>Don’t worry though, as we can change to the postgres user to create a new role.</p>

<h3 id="your-first-step-is-to-change-to-the-postgres-user">Your first step is to change to the postgres user.</h3>

<p>You can do this by running the following command on your Raspberry Pi.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo su postgres
</code></pre></div></div>

<h3 id="once-you-have-changed-to-the-postgres-user-we-can-now-create-a-new-role">Once you have changed to the postgres user, we can now create a new role.</h3>

<p>Run the command below on your device to begin the process of creating a role for our pi user.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createuser pi -P --interactive
</code></pre></div></div>
<p>During this process, you will be prompted to answer a few details.</p>

<h3 id="the-first-prompt-will-ask-you-to-enter-a-password-for-this-new-role">The first prompt will ask you to enter a password for this new role.</h3>

<p>Setting a password adds an extra layer of security when connecting to your Raspberry Pi’s PostgreSQL server.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter password for new role:
Enter it again:
</code></pre></div></div>
<h3 id="you-will-now-need-to-decide-if-you-want-this-new-user-to-be-a-superuser">You will now need to decide if you want this new user to be a superuser.</h3>

<p>If you want to use the pi user to create databases and other stuff, answer Y to this question.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shall the new role be a superuser? (y/n) y
</code></pre></div></div>
<h3 id="our-next-step-is-to-create-a-database-that-has-the-same-name-as-our-user">Our next step is to create a database that has the same name as our user.</h3>

<p>When you try to use the command-line interface, it will automatically try and connect to a database with the same name as your username.</p>

<p>Load up the command line interface by running the following command.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql
</code></pre></div></div>
<h3 id="now-create-a-database-with-the-pi-username-by-typing-in-the-following">Now, create a database with the pi username by typing in the following.</h3>

<p>This database is mainly here to make it easier to start using the CLI tool easily.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE DATABASE pi;
</code></pre></div></div>
<h3 id="you-can-quit-out-of-the-cli-tool-by-typing-the-following-into-postgresql">You can quit out of the CLI tool by typing the following into PostgreSQL.</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit
</code></pre></div></div>
<h3 id="with-the-role-created-for-our-pi-user-we-can-now-change-back-to-it">With the role created for our pi user, we can now change back to it.</h3>

<p>To get back to the pi user, all you need to do is enter the command below.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit
</code></pre></div></div>
<h2 id="creating-your-first-postgresql-database-on-the-raspberry-pi">Creating your first PostgreSQL Database on the Raspberry Pi</h2>
<p>To test that PostgreSQL is now up and running on our Raspberry Pi, we will now create a new database on it.</p>

<p>These steps will show you how to use the Postgres CLI to create a database and add a table to it.</p>

<h3 id="let-us-start-this-process-by-loading-into-the-postgres-cli">Let us start this process by loading into the Postgres CLI.</h3>

<p>Run the following command to switch into the command line interface.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql
</code></pre></div></div>
<h3 id="within-the-postgresql-command-line-we-can-now-create-and-manipulate-databases">Within the PostgreSQL command line, we can now create and manipulate databases.</h3>

<p>As we mentioned earlier, Postgres uses the SQL programming language. If you have ever used SQL before, you will feel right out home.</p>

<p>For our first task, let us create a new database on our Raspberry Pi. For this example, we will call this database “exampledb“.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE DATABASE exampledb;
</code></pre></div></div>
<h3 id="next-you-will-need-to-change-to-this-new-database">Next, you will need to change to this new database.</h3>

<p>By default, when you launch the Postgres CLI, you will interact with the database with the same name as your user.</p>

<p>To change to our new DB, we need to use the “\connect” command followed by our DB’s name.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\connect exampledb;
</code></pre></div></div>
<p>Once the CLI has connected to your new database, you should get a message as we have below.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are now connected to database "exampledb" as user "pi".
</code></pre></div></div>
<h3 id="our-next-step-to-show-postgresql-is-running-on-the-raspberry-pi-is-to-create-a-table-within-our-database">Our next step to show PostgreSQL is running on the Raspberry Pi is to create a table within our database.</h3>

<p>We are going to make this a simple table called “authors” that has two columns. One column will be called “name“, and the other will be called “website“.</p>

<p>We will set the data type for both of these columns to “text“.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE authors (name text, website text);
</code></pre></div></div>
<h3 id="let-us-now-add-a-row-of-data-to-this-brand-new-table">Let us now add a row of data to this brand new table.</h3>

<p>Having support for SQL makes adding this data a simple process. For our row, we will add an author with the name “Emmet” and the website “pimylifeup.com”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INSERT INTO authors VALUES ('Emmet', 'pimylifeup.com');
</code></pre></div></div>
<h3 id="finally-our-last-task-is-to-get-postgresql-to-output-the-data-stored-in-this-table">Finally, our last task is to get PostgreSQL to output the data stored in this table.</h3>

<p>To do this, we can use the following simple select statement.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM authors
</code></pre></div></div>
<p>From this command, you should see all of the data that is stored within the specified table.</p>

<p>As we have only added a single row to this table, that is all you should see outputted into the command line.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> name  |    website
-------+----------------
 Emmet | pimylifeup.com
(1 row)
</code></pre></div></div>
:ET